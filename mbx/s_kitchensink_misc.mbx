<section xml:id="s_kitchensink_misc">
<title>Miscellaneous Gems</title>


<subsection>
<title>The Stable Matching Theorem</title>
<p>
First, a light hearted optimization problem with a quite
clever solution, called the <em>Stable Matching Theorem</em>.
There are <m>n</m> eligble males <m>b_1</m>, <m>b_2,\dots,b_n</m> and
<m>n</m> eligible females <m>g_1</m>, <m>g_2,\dots,g_n</m>. We will arrange <m>n</m>
marriages, each involving one male and one female. In the process,
we will try to make everyone happy<mdash />or at least we will try to
keep things stable.
</p>

<p>
Each female linearly orders the males in the order of her preference, i.e.,
for each <m>i=1,2,\dots,n</m>, there is a permutation <m>\sigma_i</m> of
<m>[n]</m> so that if <m>g_i</m> prefers <m>b_j</m> to <m>b_k</m>, then <m>\sigma_i(j)>
\sigma_i(k)</m>. Different females may have quite different
preference orders. Also, each male linearly orders the females in order of
his preference, i.e., for each <m>i=1,2,\dots,n</m>, there is a permutation
<m>\tau_i</m> of <m>[n]</m> so that if <m>b_i</m> prefers <m>g_j</m> to <m>g_k</m>, then
<m>\tau_i(j)>\tau(k)</m>.
</p>

<p>
A <m>1</m><ndash /><m>1</m> matching of the <m>n</m> males to the <m>n</m> females is <em>stable</em>
if there does not exist two males <m>b</m> and <m>b'</m> and two females
<m>g</m> and <m>g'</m> so that (1)<nbsp /><m>b</m> is matched to <m>g</m>; (2)<nbsp /><m>b</m> prefers <m>g'</m> to
<m>g</m>; and (3)<nbsp /><m>g</m> prefers <m>b'</m> to <m>b</m>. The idea is that given these
preferences, <m>b</m> and <m>g</m> may be mutually inclined to dissolve their relationship
and initiate daliances with other partners.
</p>

<p>
So the question is whether, regardless of their respective preferences, we can always
generate a stable matching. The answer is yes and there is a quite
clever argument, one that yields a quite efficient algorithm.
At Stage<nbsp />1, all males go knock on the front door of the female which
is tops on their list. It may happen that some females have more than
one caller while others have none. However, if a female has
one or more males at her door, she reaches out and grabs the one
among the group which she prefers most by the collar and tells the others, if there
are any, to go away. Any male rejected at this step proceeds to the
front door of the female who is second on their list. Again, a female
with one or more suitors at her door chooses the best among then
and sends the others away. This process continues until eventually,
each female is holding onto exactly one male.
</p>

<p>
It is interesting to note that each female's prospects improve over time, i.e.,
once she has a suitor, things only get better. Conversely, each male's
prospects deteriorate over time. Regardless, we assert that the resulting
matching is stable. To see this, suppose that it is unstable and
choose males <m>b</m> and <m>b'</m>, females <m>g</m> and <m>g'</m> so that <m>b</m> is matched
to <m>g</m>, but <m>b</m> prefers <m>g'</m> to <m>g</m> while <m>g</m> prefers <m>b'</m> to <m>b</m>. The
algorithm requires that male <m>b</m> start at the top of his list and
work his way down. Since he eventually lands on <m>g</m>'s door step, and
he prefers <m>g'</m> to <m>g</m>, it implies that once upon a time, he was
actually at <m>g'</m>'s door, and she sent him away. This means that at that
exact moment, she had a male in hand that she prefers to <m>b</m>. Since
her holdings only improve with time, it means that when the matching
is finalized, female <m>g</m> has a mate <m>b</m> that she prefers to <m>b'</m>.
</p>
</subsection>

</section>
